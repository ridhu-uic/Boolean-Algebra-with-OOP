
ï»¿LogicGates and Boolean Expressions
 
 
The objective is to implement a domain-specific language (DSL) using Scala for writing and evaluating set operation expressions for designers of the digital logic to implement logic gates.
In this assignment, concepts of object oriented Language such as 
        1.Defining a Class with fields,methods and constructor
        2.Creating an Object for the Class
        3.Invoking Methods and Fields of both Base and Derived Class
        4.Concept of Inheritance and Access Specifiers
                is implemented.
        5.Concept of Abstract Class
        6.Concept of Interfaces

1.Defining a Class with fields,methods and constructor
Command : ClassDef(name : String, isAbstract : Boolean, constructor : List[BooleanExpression],fields : List[Field],method : List[Method], inherits : String, implements : List[String])
        The ClassDef command is used to create a class Datatype. 
        'name' represents the name of the datatype.
        'isAbstract' if true, it means it is a abstract class. else it is a non abstract class
        'constructor' takes list of BooleanExpressions which are used to set the fields.It is called when an object is created.
        'fields' is a List of basic datatype Field. The Field has 'name', 'access specifier' (private,protected,public) and 'value'(BooleanExpression)
        'method' is a List of basic datatype Method. The Field has 'name', 'access specifier' (private,protected,public) and 'value' List(BooleanExpression).
                The methods take List of Boolean Expressions and evaluate them.
        'inherits' is a String used to inherit another class datatype with the given name.
        'implements' is List of String which holds the string of interfaces that can be implemented to the class.
        
2.Creation of an Object for the Class
Command : NewObject(name : String, classType : String)
        The NewObject command is used to create a newObject of the given datatype with the given name.
        During the Object Creation, constructor is called.The Fields and Methods are stored in Tables with their access Specifiers
    
    
3.Invoking Methods and Fields of both Base and Derived Class
Command : Object(name : String, action : BooleanExpression)
        The Object Command is used to use the created object for evaluating the fields and Methods.
        3.1Invoking a Method
        Command : invokeMethod(name_method)
        invokeMethod comand invokes the method using the tables created during the object creation.The methods can be overrided.
        The methods are first checked in the child then it is checked in the base class.
        The private methods of the base class cannot be accessed from the object.
        The objectMethodMap stores the objectName -> ClassName (Base or Derived) -> List[Methods].This Map acts like a Virtual Dispatch Table.
        
        3.2Getting a Field Value
        Command : get_Field(name_field: String)
        The command gets the value of the field in the object.

        3.3Setting a Field Value
        Command : set_Field(name_field: String,value : BooleanExpression)
        The command sets the name_field in the object to the field to the value 'value'.
        
4.Concepts of Inheritance and Access Specifiers
        The Fields and Methods of a class can be inherited by another however multiple inheritance is not allowed.Only one class can inherited by another class.
The check for cyclic inheritance will be added in future.The access Specifiers help to restict the usage of the parent class methods and fields in the child class.
The private cannot be accessed by the child class.Protected can be accessed through the methods and Public can be accessed by the objects and methods of the child class.

5.Concepts of Abstract Class 
The abstract Class implements is like any non abstract class with isAbstarct equal to true.The methods in the abstract class has to overridden in the derived class orelse an exception
is thrown by the compiler.An object cannot be created for the abstract class.

6.Concept of Interfaces
Interfaces are new datatype, it holds fields, methods and list of interfaces which can be extended by the interface.The interfaces cannot have same method signature, if given 
the compiler throws and ambiguity error.
      


How to Install and Run the package

Step 1 : Download or clone the git repository.
Step 2 : Download and install  sbt using the following link.   https://www.scala-sbt.org/download.html
Step 3 : Run sbt from the downloaded repository.
Step 4 : Run the following command through terminal opened from the repository.
        sbt clean compile test
        sbt clean compile run
